name: Deploy

on:
  pull_request:
    branches: ["main", "test"]
  push:
    branches: ["main", "test"]

jobs:
  backend:
    name: Backend Build, Test & Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & Run Tests
        working-directory: ./backend
        run: mvn clean verify --batch-mode -Dmaven.test.failure.ignore=false

      - name: Run Checkstyle (Quality)
        working-directory: ./backend
        run: mvn checkstyle:check

      - name: Generate JaCoCo Coverage
        working-directory: ./backend
        run: mvn jacoco:report

  frontend:
    name: Frontend Build, Lint & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run Lint
        working-directory: ./frontend
        run: npm run lint

      - name: Run Tests & Coverage
        working-directory: ./frontend
        run: npm test -- --coverage --watchAll=false

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.ref == 'refs/heads/main' && success()  # Só deploya se main e jobs anteriores deram certo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Backend deploy
      - name: Build Backend Docker image
        working-directory: ./backend
        run: |
          docker build -t myapp-backend:latest .

      - name: Push Backend Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag myapp-backend:latest myrepo/myapp-backend:latest
          docker push myrepo/myapp-backend:latest

      # Frontend deploy
      - name: Build Frontend Docker image
        working-directory: ./frontend
        run: |
          docker build -t myapp-frontend:latest .

      - name: Push Frontend Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag myapp-frontend:latest myrepo/myapp-frontend:latest
          docker push myrepo/myapp-frontend:latest

      - name: Deploy to Kubernetes / Server
        run: |
          # Exemplo genérico, ajustar conforme ambiente
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
