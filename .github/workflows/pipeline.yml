name: CI/CD Pipeline Completa

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]
  workflow_dispatch:

jobs:
  # ============================
  # üèóÔ∏è BUILD
  # ============================
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Maven Compile
        working-directory: ./backend
        run: mvn clean compile

      - name: Check Backend Code Formatting (Optional)
        working-directory: ./backend
        run: mvn fmt:check || echo "Lint failed"

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build React App
        working-directory: ./frontend
        run: npm run build

      - name: Lint Frontend (Optional)
        working-directory: ./frontend
        run: npm run lint || echo "Lint failed"

  # ============================
  # üîç CODE QUALITY
  # ============================
  backend-quality:
    name: Backend Quality & Coverage
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run Backend Lint & Quality
        working-directory: ./backend
        run: mvn checkstyle:check pmd:check spotbugs:check || echo "Quality warnings detected"

      - name: Generate Backend Coverage
        working-directory: ./backend
        run: mvn jacoco:report

  frontend-quality:
    name: Frontend Quality & Coverage
    runs-on: ubuntu-latest
    needs: [frontend-build]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint || echo "Lint warnings detected"

      - name: Run Frontend Coverage
        working-directory: ./frontend
        run: npm test -- --watchAll=false --coverage

  # ============================
  # üß™ TESTES
  # ============================
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('backend/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build & Run Tests
        working-directory: ./backend
        run: |
          mvn clean test -Dmaven.test.failure.ignore=true
          total=$(grep -o "<testcase" target/surefire-reports/*.xml | wc -l)
          failed=$(grep -o "<failure" target/surefire-reports/*.xml | wc -l)
          passed=$((total - failed))
          echo "Total: $total | Passed: $passed | Failed: $failed"
          if [ "$passed" -lt "$((total/2))" ]; then
            echo "::error::Too many tests failed ‚ùå"
            exit 1
          fi

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: [backend-tests]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run Frontend Tests
        working-directory: ./frontend
        run: npm test -- --ci --reporters=jest-junit || true

  # ============================
  # üöÄ DEPLOY
  # ============================
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend-tests]
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Backend Docker build & push
      - name: Build Backend Docker image
        working-directory: ./backend
        run: docker build -t myapp-backend:latest .

      - name: Push Backend Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag myapp-backend:latest myrepo/myapp-backend:latest
          docker push myrepo/myapp-backend:latest

      # Frontend Docker build & push
      - name: Build Frontend Docker image
        working-directory: ./frontend
        run: docker build -t myapp-frontend:latest .

      - name: Push Frontend Docker image
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker tag myapp-frontend:latest myrepo/myapp-frontend:latest
          docker push myrepo/myapp-frontend:latest

      # Deploy para K8s / servidor
      - name: Deploy to Kubernetes / Server
        run: |
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
