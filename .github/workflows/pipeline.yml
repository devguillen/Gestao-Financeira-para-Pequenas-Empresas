name: CI/CD Pipeline Completa

on:
  push:
    branches: [main, test]
  pull_request:
    branches: [main, test]
  workflow_dispatch:

jobs:
  # ============================
  # üèóÔ∏è BUILD
  # ============================
  build:
    name: Build
    runs-on: ubuntu-latest
    continue-on-error: true  # Se falhar, continua o pipeline
    steps:
      - uses: actions/checkout@v4

      # Backend build
      - name: Backend Build
        working-directory: ./backend
        run: |
          mvn clean compile || echo "::warning::Falha no build do backend"

      # Frontend build
      - name: Frontend Build
        working-directory: ./frontend
        run: |
          npm install || echo "::warning::Falha no npm install"
          npm run build || echo "::warning::Falha no build do frontend"

  # ============================
  # üîç CODE QUALITY
  # ============================
  code_quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true  # Mesmo se o build tiver problemas, continua
    steps:
      - uses: actions/checkout@v4

      # Backend quality checks
      - name: Backend Code Quality
        working-directory: ./backend
        run: |
          mvn checkstyle:check || echo "::warning::Problemas de estilo detectados"
          mvn spotbugs:check || echo "::warning::Problemas de bugs detectados"
          mvn pmd:check || echo "::warning::PMD encontrou problemas"

      # Frontend lint
      - name: Frontend Lint
        working-directory: ./frontend
        run: |
          npm install || echo "::warning::Falha no npm install"
          npm run lint || echo "::warning::Lint encontrou problemas"

  # ============================
  # üß™ TESTES
  # ============================
  tests:
    name: Testes
    runs-on: ubuntu-latest
    needs: [build, code_quality]
    continue-on-error: true  # Mesmo se code_quality falhar, roda os testes
    steps:
      - uses: actions/checkout@v4

      # Backend tests
      - name: Backend Tests
        working-directory: ./backend
        run: |
          mvn test -Dmaven.test.failure.ignore=false || echo "::warning::Testes backend falharam"

      # Frontend tests
      - name: Frontend Tests
        working-directory: ./frontend
        run: |
          npm install || echo "::warning::Falha no npm install"
          npm test -- --watchAll=false || echo "::warning::Testes frontend falharam"

  # ============================
  # üöÄ DEPLOY
  # ============================
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build, code_quality, tests]
    if: ${{ success() }}  # S√≥ roda se todas as etapas anteriores tiveram sucesso
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t myapp-backend ./backend || echo "::warning::Falha no build do backend Docker"
          docker build -t myapp-frontend ./frontend || echo "::warning::Falha no build do frontend Docker"

      - name: Push Docker images
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push myapp-backend || echo "::warning::Falha ao enviar imagem backend"
          docker push myapp-frontend || echo "::warning::Falha ao enviar imagem frontend"

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend.yaml || echo "::warning::Falha ao aplicar backend.yaml"
          kubectl apply -f k8s/frontend.yaml || echo "::warning::Falha ao aplicar frontend.yaml"
